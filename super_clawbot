#pragma config(Sensor, in1,    ,               sensorLineFollower)
#pragma config(Sensor, in2,    ,               sensorLineFollower)
#pragma config(Sensor, in3,    ,               sensorLineFollower)
#pragma config(Sensor, dgtl1,  ,               sensorSONAR_cm)
#pragma config(Sensor, dgtl3,  ,               sensorTouch)
#pragma config(Sensor, dgtl4,  ,               sensorTouch)
#pragma config(Sensor, dgtl5,  ,               sensorTouch)
#pragma config(Sensor, dgtl6,  ,               sensorQuadEncoder)
#pragma config(Sensor, dgtl8,  ,               sensorQuadEncoder)
#pragma config(Motor,  port1,           leftMotor,     tmotorVex393_HBridge, openLoop, reversed, driveLeft)
#pragma config(Motor,  port2,           claw,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           wrist,         tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port4,           shoulder,      tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           elbow,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          rightMotor,    tmotorVex393_HBridge, openLoop, driveRight)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(180)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	 while (true)
  {
				int startTime; //variable to hold the starting time
				int currentTime; //variable to hold the current time
				startTime = nSysTime; //takes the current system time and sets it to a variable
				currentTime = nSysTime; // initializes the currentTime variable to the current system time
				float runningTime = currentTime - startTime; // computes the running time by subtracting the current running time from the starting time
				while(runningTime < 10000) // while the running time is less than 10000 ms (10 secs) keep running
					{
							// moves straight forward for the allotted time
							motor[leftMotor] = 80; // left motor runs
			    		motor[rightMotor] = 80; // right motor runs
							currentTime = nSysTime; //keep updating the current time 
							runningTime = currentTime - startTime; //keep updating the running time
					}//end of inner while loop
			break;		//breaks out of the while loop and ends the autonomous mode
	} //end of outer while loop		
} //end of autonomous mode

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
	
  // User control code here, inside the loop

  while (true)
  {
  	// if you push button 8U (top button on right directional pad)autonomous mode is activated
  	// see task autonomous to see what happens in autonomous mode
  	if(vexRT[Btn8U] == 1)
			{
				startTask(autonomous);
			}//end of if statement
			
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................
//Driving Motor Control with Remote Control 1
    motor[leftMotor] = vexRT[Ch2] / 2;
    motor[rightMotor] = vexRT[Ch3] / 2;
	//vexRT[Ch1] / 2; will use the x axis of the right joystick for whatever you want
	//vexRT[Ch4] / 2; will use the x axis of the left joystick for whatever you want
	
		
    //to move the shoulder
    if(vexRT[Btn6U] == 1) //moves shoulder up when you press button 6U (right upper trigger)
    {
      motor[shoulder] = -40;
    }
    else if(vexRT[Btn6D] == 1) //moves shoulder down when you press button 6D (right lower trigger)
    {
      motor[shoulder] = 40;
    }
    else //stops the shoulder from moving when no buttons are pushed
    {
      motor[shoulder] = 0;
    } //end of shoulder
    
    //to move the elbow
     if(vexRT[Btn5U] == 1) //moves the elbow up when you press button 5U (left upper trigger)
    {
      motor[elbow] = -40;
    }
    else if(vexRT[Btn5D] == 1) //moves the elbow down when you press button 5D (left lower trigger)
    {
      motor[elbow] = 40;
    }
    else //stops the elbow from moving when no buttons are pushed
    {
      motor[elbow] = 0;
    }// end of elbow
    
    // to move the wrist
     if(vexRT[Btn7L] == 1)//rotates the claw counterclockise when button 7L is pushed (left button on left directional pad)
    {
      motor[wrist] = -40;
    }
    else if(vexRT[Btn7D] == 1) //rotates the claw clockise when button 7D is pushed (bottom button on left directional pad)
    {
      motor[wrist] = 40;
    }
    else //no rotation when no buttons are pushed
    {
      motor[wrist] = 0;
    }
    
    // to move the claw
     if(vexRT[Btn8R] == 1) //opens the claw when button 8R is pushed (right button on right directional pad)
    {
      motor[claw] = 40;
    }
    else if(vexRT[Btn8D] == 1) //closes the claw when button 8D is pushed (bottom button on right directional pad)
    {
      motor[claw] = -40;
    }
    else //stops the claw when no buttons are pushed
    {
      motor[claw] = 0;
  	}
	}//end of while loop
    
}//end of task
